 /**
 * @fileOverview Delimited continuation monad transformer.
 * 
 * Based on:
 * http://www.cs.indiana.edu/~sabry/papers/monadicDC.pdf
 * 
 * @TODO: Tail call implementation could be improved.
 */
package DContT
with
    import 'nu-stream::stream' {append cons first rest isEmpty NIL},
    
    import 'unique-m::trans::unique' UniqueT,
    import 'akh::structure' {Monad Transformer},
    
    import '../spec/dcont' DContMonad,
    import '../_tail' {Tail trampoline}
in {

/* Segments
 ******************************************************************************/
/**
 * Control segment.
 */
var Seg := function \f =self-> {
    self.frame = f;
};

/**
 * Delimiter.
 */
var P := function \t =self-> {
    self.prompt = t;
};

/* Control Stack
 ******************************************************************************/
/**
 * Empty control stack.
 */
var empty := NIL;

/**
 * Push a single frame onto a control stack.
 */
var push := cons;

/**
 * Push an entire slice of control stack onto a control stack.
 */
var pushSeq := append;

/**
 * Push a delimiter `t` on onto control stack `k`.
 */
var pushP := \t k ->
    push(new P(t), k);

/**
 * Push a segment for `f` onto control stack `k`.
 */
var pushSeg := \f k ->
    push(new Seg(f), k);

/**
 * Splits the control stack around prompt `t`.
 */
var splitSeq := \t k -> {
    if (isEmpty k)
        return [empty, empty];
    
    var x = first k,
        xs = rest k;
    
    if (x instanceof P && x.prompt === t)
        return [empty, xs];
    
    return let
        [a, b] = splitSeq(t, xs)
    in
        [push(x, a), b];
};

/* Transformer
 ******************************************************************************/
var unDContT := \m k ->
    new Tail(m.run, k);

var runDContT = unDContT \>> trampoline \> UniqueT.runUniqueT;

/**
 * Delimited continuation monad transformer.
 * 
 * @param m Base monad.
 */
DContT = \m -> {
    var M = UniqueT(m);
    
    var Instance = function \run =self-> {
        self.run = run;
    };
    
    /**
     * Apply continuation `k`
     * 
     * @param k Continuation.
     * @param x Value
     */
    var appk = \k x -> {
        var c = k;
        do {
            if (typeof c === 'function')
                return M.of <| c x;
            
            var top := first c;
            if (top instanceof Seg)
                return unDContT(top.frame(x), rest c);
            
            c = ?top instanceof P
                :rest c
                :top;
        } while (true);
    };
    
    Monad(Instance,
        \x ->
            new Instance\k ->
                appk(k, x),
        
        \f =c->
            new Instance\k ->
                unDContT(c, pushSeg(f, k)));

    Transformer(Instance, m,
        \t ->
            new Instance\k ->
                M.lift(t.map trampoline).chain(appk @ k \> trampoline));
    
    DContMonad(Instance,
        // newPrompt
        new Instance\k ->
            M.unique.chain(appk @ k \> trampoline),
        
        // pushPrompt;
        \prompt c ->
            new Instance\k ->
                unDContT(c, pushP(prompt, k)),
        
        // withSubCont;
        \prompt f ->
            new Instance\k -> let
                [x, xs] = splitSeq(prompt, k)
            in
                unDContT(f x, xs),
        
        // pushSubCont
        \subk c ->
            new Instance\k ->
                unDContT(c, pushSeq(subk, k)));
    
    return Instance;
};

/* Running
 ******************************************************************************/
/**
 * Perform a continuation computation and complete with `k`.
 * 
 * @param m ContT computation.
 * @param k Outer continuation.
 */
DContT.runDContT = \m k ->
    runDContT(m, push(k, empty));

}